@page "/system/logs"
@using CleanArchitecture.Blazor.Application.Features.Loggers.DTOs
@using CleanArchitecture.Blazor.Application.Features.Loggers.Queries.PaginationQuery
@using CleanArchitecture.Blazor.Application.Features.Loggers.Specifications
@using CleanArchitecture.Blazor.Server.UI.Components.UtcToLocalTime
@using CleanArchitecture.Blazor.Server.UI.Services.JsInterop
@using CleanArchitecture.Blazor.Server.UI.Pages.SystemManagement.Components
@using CleanArchitecture.Blazor.Application.Features.Loggers.Commands.Clear

@attribute [Authorize(Policy = Permissions.Logs.View)]
@inject IStringLocalizer<Logs> L
@inject LocalTimezoneOffset LocalTimezoneOffset
<PageTitle>@Title</PageTitle>

<LogsLineCharts></LogsLineCharts>
<MudDataGrid T="LogDto"
             ServerData="@(ServerReload)"
             FixedHeader="true"
             FixedFooter="false"
             Virtualize="true"
             RowsPerPage="@_defaultPageSize"
             Height="calc(100vh - 360px)"
             Style="min-height:700px"
             Loading="@_loading"
             ColumnResizeMode="ResizeMode.Column"
             Hover="true" @ref="_table">
    <ToolBarContent>
        <div class="d-flex align-start flex-grow-1">
            <div class="d-flex gap-4">
                <MudIcon Icon="@Icons.Material.Filled.BarChart" Size="Size.Large"/>
                <div class="d-flex flex-column">
                    <MudText Typo="Typo.caption" Class="mb-2">@Title</MudText>
                    <MudEnumSelect Style="min-width:120px" TEnum="LogListView" ValueChanged="OnChangedListView" Value="Query.ListView" Dense="true" Label="@L["List View"]">
                    </MudEnumSelect>
                </div>
            </div>
            <div class="flex-grow-1"/>

            <div class="d-flex flex-column justify-end">
                <div class="d-flex gap-1">
                    <MudButton  Variant="Variant.Outlined"
                               Size="Size.Small"
                               Disabled="@_loading"
                               OnClick="@(OnRefresh)"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Primary"
                               >
                        @ConstantString.Refresh
                    </MudButton>
                    @if (_canPurge)
                    {
                        <MudButton  Variant="Variant.Outlined"
                                   Size="Size.Small"
                                   Disabled="@(_loading || _clearing)"
                                   OnClick="@(OnPurge)"
                                   StartIcon="@Icons.Material.Filled.ClearAll" IconColor="Color.Surface" Color="Color.Secondary"
                                   >
                            @if (_clearing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">@ConstantString.Waiting</MudText>
                            }
                            else
                            {
                                <MudText> @ConstantString.Clear </MudText>
                            }

                        </MudButton>
                    }
                </div>
                <MudStack Row="true" AlignItems="AlignItems.Stretch">
                    <MudEnumSelect TEnum="LogLevel?" Placeholder="@L["Search by level"]" Value="@Query.Level" Clearable="true" ValueChanged="OnChangedLevel" Style="min-width:120px" FullWidth="true"> </MudEnumSelect>
                    <MudHidden Breakpoint="Breakpoint.SmAndDown">
                        <MudTextField T="string" Style="min-width:120px" ValueChanged="@(OnSearch)" Value="@Query.Keyword" Placeholder="Search" Adornment="Adornment.End"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium">
                        </MudTextField>
                    </MudHidden>
                </MudStack>

            </div>
        </div>

    </ToolBarContent>
    <Columns>
        <HierarchyColumn T="LogDto" ButtonDisabledFunc="@(x => string.IsNullOrEmpty(x.Message))"/>
        <PropertyColumn Style="width:130px" Property="x => x.TimeStamp" Title="@L[_currentDto.GetMemberDescription(x => x.TimeStamp)]">
            <CellTemplate>
                <UtcToLocal UTCDateTime="@context.Item.TimeStamp"></UtcToLocal>
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Style="width:120px" Property="x => x.Level" Title="@L[_currentDto.GetMemberDescription(x => x.Level)]">
            <CellTemplate>
                @switch (context.Item.Level)
                {
                    case "Information":
                        <MudChip Color="Color.Info" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Warning":
                        <MudChip Color="Color.Warning" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Error":
                        <MudChip Color="Color.Error" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Critical":
                        <MudChip Color="Color.Error" Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                    case "Trace":
                    case "Debug":
                    default:
                        <MudChip Size="Size.Small">@context.Item.Level</MudChip>
                        break;
                }
            </CellTemplate>
        </PropertyColumn>
        <PropertyColumn Property="x => x.Message" Title="@L[_currentDto.GetMemberDescription(x => x.Message)]"/>
        <PropertyColumn Style="width:120px" Property="x => x.UserName" Title="@L[_currentDto.GetMemberDescription(x => x.UserName)]"/>
    </Columns>
    <ChildRowContent>
        <MudCard Elevation="0">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.body1">
                        <strong>@context.Item.Level</strong>
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="pt-0">
                <MudText>@L[_currentDto.GetMemberDescription(x => x.Message)]</MudText>
                <MudText Typo="Typo.body2">@context.Item.Message</MudText>
                @if (!string.IsNullOrEmpty(context.Item.Exception))
                {
                    <MudText Color="Color.Error">@L[_currentDto.GetMemberDescription(x => x.Exception)]</MudText>
                    <MudText Color="Color.Warning" Typo="Typo.body2">@context.Item.Exception</MudText>
                }
                <MudText>@L[_currentDto.GetMemberDescription(x => x.ClientIP)]</MudText>
                <MudText Typo="Typo.body2">@context.Item.ClientIP</MudText>
                <MudText>@L[_currentDto.GetMemberDescription(x => x.ClientAgent)]</MudText>
                <MudText Typo="Typo.body2">@context.Item.ClientAgent</MudText>
            </MudCardContent>
        </MudCard>
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>@ConstantString.NoRecords</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>@ConstantString.Loading</MudText>
    </LoadingContent>
    <PagerContent>
        <MudDataGridPager PageSizeOptions="@(new[] { 10, 15, 30, 50, 100, 500, 1000 })"/>
    </PagerContent>
</MudDataGrid>

<style>
    .mud-table-toolbar {
        height: 120px !important;
    }
</style>

@code
{
    [CascadingParameter] private Task<AuthenticationState> AuthState { get; set; } = default!;
    private string Title { get; set; } = "Logs";
    private string _searchString = string.Empty;
    private MudDataGrid<LogDto> _table = default!;
    private readonly LogDto _currentDto = new();
    private readonly int _defaultPageSize = 15;
    private int _timezoneOffset;

    private bool _loading;
    private bool _clearing;
    private bool _canPurge;

    private LogsWithPaginationQuery Query { get; } = new();

    protected override async Task OnInitializedAsync()
    {
        Title = L["Logs"];
        var state = await AuthState;
        _canPurge = (await AuthService.AuthorizeAsync(state.User, Permissions.Logs.Purge)).Succeeded;

        _timezoneOffset = await LocalTimezoneOffset.HourOffset();
    }


    private async Task<GridData<LogDto>> ServerReload(GridState<LogDto> state)
    {
        try
        {
            _loading = true;
            Query.OrderBy = state.SortDefinitions.FirstOrDefault()?.SortBy ?? "Id";
            Query.SortDirection = state.SortDefinitions.FirstOrDefault()?.Descending ?? true ? SortDirection.Descending.ToString() : SortDirection.Ascending.ToString();
            Query.PageNumber = state.Page + 1;
            Query.PageSize = state.PageSize;
            Query.TimezoneOffset = _timezoneOffset;
            var result = await Mediator.Send(Query).ConfigureAwait(false);

            return new GridData<LogDto> { TotalItems = result.TotalItems, Items = result.Items };
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnChangedListView(LogListView listview)
    {
        Query.ListView = listview;
        await _table.ReloadServerData();
    }

    private async Task OnChangedLevel(LogLevel? level)
    {
        Query.Level = level;
        await _table.ReloadServerData();
    }

    private async Task OnSearch(string text)
    {
        Query.Keyword = text;
        await _table.ReloadServerData();
    }

    private async Task OnRefresh()
    {
        Query.Keyword = string.Empty;
        await _table.ReloadServerData();
    }

    private async Task OnPurge()
    {
        var contentText = $"{L["Are you sure you want to erase all the logs?"]}";
        var title = $"{L["Erase logs"]}";
        await DialogServiceHelper.ShowConfirmationDialogAsync(title, contentText, async () =>
        {
            _clearing = true;
            try
            {
                var command = new ClearLogsCommand();
                var result = await Mediator.Send(command);
                await _table.ReloadServerData();
                Snackbar.Add(L["Logs have been erased"], Severity.Info);
            }
            finally
            {
                _clearing = false;
            }
        });
    }
}