@using CleanArchitecture.Blazor.Server.UI.Services.Fusion
@using CleanArchitecture.Blazor.Server.UI.Hubs
@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity

@implements IDisposable
@inject IStringLocalizer<SharedResource> L


@code {

    public void Dispose()
    {
        Client.LoginEvent -= _client_Login;
        Client.LogoutEvent -= _client_Logout;
        GC.SuppressFinalize(this);
    }


    [Inject] private HubClient Client { get; set; } = default!;
    [Inject] private IUsersStateContainer UsersStateContainer { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {

        Client.LoginEvent += _client_Login;
        Client.LogoutEvent += _client_Logout;
        await Client.StartAsync();

    }
    private void _client_Login(object? sender, UserStateChangeEventArgs args)
    {
        InvokeAsync(() =>
        {
            Snackbar.Add(string.Format(L["{0} has logged in."], args.UserName), Severity.Info);
            UsersStateContainer.AddOrUpdate(args.ConnectionId, args.UserName);
        });
    }

    private void _client_Logout(object? sender, UserStateChangeEventArgs args)
    {
        InvokeAsync(() =>
        {
            Snackbar.Add(string.Format(L["{0} has logged out."], args.UserName));
            UsersStateContainer.Remove(args.ConnectionId);
        });
    }


}